{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CsvConfigConsts = function () {\n  function CsvConfigConsts() {}\n\n  CsvConfigConsts.EOL = \"\\r\\n\";\n  CsvConfigConsts.BOM = \"\\uFEFF\";\n  CsvConfigConsts.DEFAULT_FIELD_SEPARATOR = ',';\n  CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR = '.';\n  CsvConfigConsts.DEFAULT_QUOTE = '\"';\n  CsvConfigConsts.DEFAULT_SHOW_TITLE = false;\n  CsvConfigConsts.DEFAULT_TITLE = 'My Report';\n  CsvConfigConsts.DEFAULT_FILENAME = 'mycsv.csv';\n  CsvConfigConsts.DEFAULT_SHOW_LABELS = false;\n  CsvConfigConsts.DEFAULT_USE_BOM = true;\n  CsvConfigConsts.DEFAULT_HEADER = [];\n  CsvConfigConsts.DEFAULT_NO_DOWNLOAD = false;\n  CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES = false;\n  return CsvConfigConsts;\n}();\n\nexports.CsvConfigConsts = CsvConfigConsts;\nexports.ConfigDefaults = {\n  filename: CsvConfigConsts.DEFAULT_FILENAME,\n  fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,\n  quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,\n  decimalseparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,\n  showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,\n  showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,\n  title: CsvConfigConsts.DEFAULT_TITLE,\n  useBom: CsvConfigConsts.DEFAULT_USE_BOM,\n  headers: CsvConfigConsts.DEFAULT_HEADER,\n  noDownload: CsvConfigConsts.DEFAULT_NO_DOWNLOAD,\n  removeEmptyValues: CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES\n};\n\nvar ngxCsv = function () {\n  function ngxCsv(DataJSON, filename, options) {\n    this.csv = \"\";\n    var config = options || {};\n    this.data = typeof DataJSON != 'object' ? JSON.parse(DataJSON) : DataJSON;\n    this._options = objectAssign({}, exports.ConfigDefaults, config);\n\n    if (this._options.filename) {\n      this._options.filename = filename;\n    }\n\n    this.generateCsv();\n  }\n  /**\r\n   * Generate and Download Csv\r\n   */\n\n\n  ngxCsv.prototype.generateCsv = function () {\n    if (this._options.useBom) {\n      this.csv += CsvConfigConsts.BOM;\n    }\n\n    if (this._options.showTitle) {\n      this.csv += this._options.title + '\\r\\n\\n';\n    }\n\n    this.getHeaders();\n    this.getBody();\n\n    if (this.csv == '') {\n      console.log(\"Invalid data\");\n      return;\n    }\n\n    if (this._options.noDownload) {\n      return this.csv;\n    }\n\n    var blob = new Blob([this.csv], {\n      \"type\": \"text/csv;charset=utf8;\"\n    });\n\n    if (navigator.msSaveBlob) {\n      var filename = this._options.filename.replace(/ /g, \"_\") + \".csv\";\n      navigator.msSaveBlob(blob, filename);\n    } else {\n      var uri = 'data:attachment/csv;charset=utf-8,' + encodeURI(this.csv);\n      var link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.setAttribute('visibility', 'hidden');\n      link.download = this._options.filename.replace(/ /g, \"_\") + \".csv\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  /**\r\n   * Create Headers\r\n   */\n\n\n  ngxCsv.prototype.getHeaders = function () {\n    var _this = this;\n\n    if (this._options.headers.length > 0) {\n      var headers = this._options.headers;\n      var row = headers.reduce(function (headerRow, header) {\n        return headerRow + header + _this._options.fieldSeparator;\n      }, '');\n      row = row.slice(0, -1);\n      this.csv += row + CsvConfigConsts.EOL;\n    }\n  };\n  /**\r\n   * Create Body\r\n   */\n\n\n  ngxCsv.prototype.getBody = function () {\n    for (var i = 0; i < this.data.length; i++) {\n      var row = \"\";\n\n      for (var index in this.data[i]) {\n        row += this.formartData(this.data[i][index]) + this._options.fieldSeparator;\n      }\n\n      row = row.slice(0, -1);\n      this.csv += row + CsvConfigConsts.EOL;\n    }\n  };\n  /**\r\n   * Format Data\r\n   * @param {any} data\r\n   */\n\n\n  ngxCsv.prototype.formartData = function (data) {\n    if (this._options.removeEmptyValues && !data) {\n      return \"\";\n    }\n\n    if (this._options.decimalseparator === 'locale' && ngxCsv.isFloat(data)) {\n      return data.toLocaleString();\n    }\n\n    if (this._options.decimalseparator !== '.' && ngxCsv.isFloat(data)) {\n      return data.toString().replace('.', this._options.decimalseparator);\n    }\n\n    if (typeof data === 'string') {\n      data = data.replace(/\"/g, '\"\"');\n\n      if (this._options.quoteStrings || data.indexOf(',') > -1 || data.indexOf('\\n') > -1 || data.indexOf('\\r') > -1) {\n        data = this._options.quoteStrings + data + this._options.quoteStrings;\n      }\n\n      return data;\n    }\n\n    if (typeof data === 'boolean') {\n      return data ? 'TRUE' : 'FALSE';\n    }\n\n    return data;\n  };\n  /**\r\n   * Get CSV String\r\n   */\n\n\n  ngxCsv.prototype.getCsv = function () {\n    return this.csv;\n  };\n  /**\r\n   * Check if is Float\r\n   * @param {any} input\r\n   */\n\n\n  ngxCsv.isFloat = function (input) {\n    return +input === input && (!isFinite(input) || Boolean(input % 1));\n  };\n\n  return ngxCsv;\n}();\n\nexports.ngxCsv = ngxCsv;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n/**\r\n * Convet to Object\r\n * @param {any} val\r\n */\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n/**\r\n * Assign data  to new Object\r\n * @param {any}   target\r\n * @param {any[]} ...source\r\n */\n\n\nfunction objectAssign(target) {\n  var source = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    source[_i - 1] = arguments[_i];\n  }\n\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      symbols = Object.getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n}","map":{"version":3,"sources":["../ngx-csv.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CsvConfigConsts = (function () {\r\n    function CsvConfigConsts() {\r\n    }\r\n    CsvConfigConsts.EOL = \"\\r\\n\";\r\n    CsvConfigConsts.BOM = \"\\ufeff\";\r\n    CsvConfigConsts.DEFAULT_FIELD_SEPARATOR = ',';\r\n    CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR = '.';\r\n    CsvConfigConsts.DEFAULT_QUOTE = '\"';\r\n    CsvConfigConsts.DEFAULT_SHOW_TITLE = false;\r\n    CsvConfigConsts.DEFAULT_TITLE = 'My Report';\r\n    CsvConfigConsts.DEFAULT_FILENAME = 'mycsv.csv';\r\n    CsvConfigConsts.DEFAULT_SHOW_LABELS = false;\r\n    CsvConfigConsts.DEFAULT_USE_BOM = true;\r\n    CsvConfigConsts.DEFAULT_HEADER = [];\r\n    CsvConfigConsts.DEFAULT_NO_DOWNLOAD = false;\r\n    CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES = false;\r\n    return CsvConfigConsts;\r\n}());\r\nexports.CsvConfigConsts = CsvConfigConsts;\r\nexports.ConfigDefaults = {\r\n    filename: CsvConfigConsts.DEFAULT_FILENAME,\r\n    fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,\r\n    quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,\r\n    decimalseparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,\r\n    showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,\r\n    showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,\r\n    title: CsvConfigConsts.DEFAULT_TITLE,\r\n    useBom: CsvConfigConsts.DEFAULT_USE_BOM,\r\n    headers: CsvConfigConsts.DEFAULT_HEADER,\r\n    noDownload: CsvConfigConsts.DEFAULT_NO_DOWNLOAD,\r\n    removeEmptyValues: CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES\r\n};\r\nvar ngxCsv = (function () {\r\n    function ngxCsv(DataJSON, filename, options) {\r\n        this.csv = \"\";\r\n        var config = options || {};\r\n        this.data = typeof DataJSON != 'object' ? JSON.parse(DataJSON) : DataJSON;\r\n        this._options = objectAssign({}, exports.ConfigDefaults, config);\r\n        if (this._options.filename) {\r\n            this._options.filename = filename;\r\n        }\r\n        this.generateCsv();\r\n    }\r\n    /**\r\n     * Generate and Download Csv\r\n     */\r\n    ngxCsv.prototype.generateCsv = function () {\r\n        if (this._options.useBom) {\r\n            this.csv += CsvConfigConsts.BOM;\r\n        }\r\n        if (this._options.showTitle) {\r\n            this.csv += this._options.title + '\\r\\n\\n';\r\n        }\r\n        this.getHeaders();\r\n        this.getBody();\r\n        if (this.csv == '') {\r\n            console.log(\"Invalid data\");\r\n            return;\r\n        }\r\n        if (this._options.noDownload) {\r\n            return this.csv;\r\n        }\r\n        var blob = new Blob([this.csv], { \"type\": \"text/csv;charset=utf8;\" });\r\n        if (navigator.msSaveBlob) {\r\n            var filename = this._options.filename.replace(/ /g, \"_\") + \".csv\";\r\n            navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            var uri = 'data:attachment/csv;charset=utf-8,' + encodeURI(this.csv);\r\n            var link = document.createElement(\"a\");\r\n            link.href = URL.createObjectURL(blob);\r\n            link.setAttribute('visibility', 'hidden');\r\n            link.download = this._options.filename.replace(/ /g, \"_\") + \".csv\";\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    };\r\n    /**\r\n     * Create Headers\r\n     */\r\n    ngxCsv.prototype.getHeaders = function () {\r\n        var _this = this;\r\n        if (this._options.headers.length > 0) {\r\n            var headers = this._options.headers;\r\n            var row = headers.reduce(function (headerRow, header) {\r\n                return headerRow + header + _this._options.fieldSeparator;\r\n            }, '');\r\n            row = row.slice(0, -1);\r\n            this.csv += row + CsvConfigConsts.EOL;\r\n        }\r\n    };\r\n    /**\r\n     * Create Body\r\n     */\r\n    ngxCsv.prototype.getBody = function () {\r\n        for (var i = 0; i < this.data.length; i++) {\r\n            var row = \"\";\r\n            for (var index in this.data[i]) {\r\n                row += this.formartData(this.data[i][index]) + this._options.fieldSeparator;\r\n            }\r\n            row = row.slice(0, -1);\r\n            this.csv += row + CsvConfigConsts.EOL;\r\n        }\r\n    };\r\n    /**\r\n     * Format Data\r\n     * @param {any} data\r\n     */\r\n    ngxCsv.prototype.formartData = function (data) {\r\n        if (this._options.removeEmptyValues && !data) {\r\n            return \"\";\r\n        }\r\n        if (this._options.decimalseparator === 'locale' && ngxCsv.isFloat(data)) {\r\n            return data.toLocaleString();\r\n        }\r\n        if (this._options.decimalseparator !== '.' && ngxCsv.isFloat(data)) {\r\n            return data.toString().replace('.', this._options.decimalseparator);\r\n        }\r\n        if (typeof data === 'string') {\r\n            data = data.replace(/\"/g, '\"\"');\r\n            if (this._options.quoteStrings || data.indexOf(',') > -1 || data.indexOf('\\n') > -1 || data.indexOf('\\r') > -1) {\r\n                data = this._options.quoteStrings + data + this._options.quoteStrings;\r\n            }\r\n            return data;\r\n        }\r\n        if (typeof data === 'boolean') {\r\n            return data ? 'TRUE' : 'FALSE';\r\n        }\r\n        return data;\r\n    };\r\n    /**\r\n     * Get CSV String\r\n     */\r\n    ngxCsv.prototype.getCsv = function () {\r\n        return this.csv;\r\n    };\r\n    /**\r\n     * Check if is Float\r\n     * @param {any} input\r\n     */\r\n    ngxCsv.isFloat = function (input) {\r\n        return +input === input && (!isFinite(input) || Boolean(input % 1));\r\n    };\r\n    return ngxCsv;\r\n}());\r\nexports.ngxCsv = ngxCsv;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n/**\r\n * Convet to Object\r\n * @param {any} val\r\n */\r\nfunction toObject(val) {\r\n    if (val === null || val === undefined) {\r\n        throw new TypeError('Object.assign cannot be called with null or undefined');\r\n    }\r\n    return Object(val);\r\n}\r\n/**\r\n * Assign data  to new Object\r\n * @param {any}   target\r\n * @param {any[]} ...source\r\n */\r\nfunction objectAssign(target) {\r\n    var source = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        source[_i - 1] = arguments[_i];\r\n    }\r\n    var from;\r\n    var to = toObject(target);\r\n    var symbols;\r\n    for (var s = 1; s < arguments.length; s++) {\r\n        from = Object(arguments[s]);\r\n        for (var key in from) {\r\n            if (hasOwnProperty.call(from, key)) {\r\n                to[key] = from[key];\r\n            }\r\n        }\r\n        if (Object.getOwnPropertySymbols) {\r\n            symbols = Object.getOwnPropertySymbols(from);\r\n            for (var i = 0; i < symbols.length; i++) {\r\n                if (propIsEnumerable.call(from, symbols[i])) {\r\n                    to[symbols[i]] = from[symbols[i]];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return to;\r\n}\r\n//# sourceMappingURL=ngx-csv.js.map"]},"metadata":{},"sourceType":"script"}